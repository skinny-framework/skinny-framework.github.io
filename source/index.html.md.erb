<hr/>
<iframe src="http://ghbtns.com/github-btn.html?user=skinny-framework&repo=skinny-framework&type=watch&count=true&size=large" height="30" width="140" frameborder="0" scrolling="0" style="width:140px; height: 30px;" allowTransparency="true"></iframe>
<iframe src="http://ghbtns.com/github-btn.html?user=skinny-framework&repo=skinny-framework&type=fork&count=true&size=large" height="30" width="140" frameborder="0" scrolling="0" style="width:140px; height: 30px;" allowTransparency="true"></iframe>
<hr/>
<img alt="Logo" src="/images/logo.png" />
<hr/>

## What's Skinny?
<hr/>

Skinny is a full-stack web app framework built on Skinny Micro.

To put it simply, Skinny framework's concept is **Scala on Rails**. Skinny is highly inspired by [Ruby on Rails](http://rubyonrails.org/) and it is optimized for sustainable productivity for Servlet-based web app development.

What's more, Skinny's components are basically independent from Skinny app environment. If you prefer using only Skinny ORM, Validator module or else, it's also possible. We hope Skinny components help developers that use other frameworks too.

Why Skinny named as Skinny? What does the name `Skinny` actually mean? We have three reasons as follows.

<hr/>

<h3>Application should be skinny</h3>

All the parts of a web application - controllers, models, views, routings and other settings - should be skinny. If you use Skinny framework, you can do without a lot of non-essential boilerplate code. For instance, when you create a simple registration form, all you need to do is define the parameters and validation rules and create view templates in an efficient way (ssp, scaml, jade, FreeMarker or something else) in most cases.

<h3>Framework itself should be skinny</h3>

Even if you need to investigate Skinny's internals, don't worry. Skinny keeps itself skinny, too. We believe that if the framework is well-designed, the resulting implementation will be skinny.

<h3>'su-ki-ni' in Japanese means 'as you like it'</h3>

A sound-alike word **"好きに (su-ki-ni)"** in Japanese means **"as you like it"**. This is only half kidding but it also represents Skinny's concept. Skinny framework should provide flexible APIs to empower developers as much as possible and shouldn't get in the way.

<hr/>
## Try It Right Now
<hr/>

Download `skinny-blank-app.zip` and unzip it, then just run ./skinny (or skinny.bat) command on your terminal. That's all!

[![Download](images/blank-app-download.png)](https://github.com/skinny-framework/skinny-framework/releases/download/<%= config[:skinny_blank_app_version] %>/skinny-blank-app.zip)

<hr/>

After unzipping blank-app.zip, Let's create our first Skinny app by using the scaffold generator.

```sh
# If you're a zsh user, try "noglob ./skinny g scaffold ..."
./skinny g scaffold members member name:String activated:Boolean luckyNumber:Option[Long] birthday:Option[LocalDate]
./skinny db:migrate

# When you use IDE's debugger, use "./skinny debug" instead. (default JDWP port is 5005)
./skinny run
```

If you prefer Scalate templates precompilation, specify `-precompile` option too.

```sh
./skinny run -precompile
```

And then, access `http://localhost:8080/members`.

You can also run the generated tests.

```
./skinny db:migrate test
./skinny test
```

Now let's create a war file for deployment to a Servlet container.

```sh
./skinny package
```

It's also possible to build a standalone runnable jar file (with embedded Jetty server).

```sh
./skinny package:standalone
```

<hr/>
## Skinny's Components Overview
<hr/>

### Skinny Micro
<hr/>

In the aspect of Web application framework, Skinny Framework's core part is an independent and useful micro framework named [Skinny Micro](/documentation/micro.html). The following code shows you how to run Skinny Micro application right now by using [sbt Script runnner](http://www.scala-sbt.org/0.13/docs/Scripts.html).

```scala
#!/usr/bin/env scalas
/***
scalaVersion := "<%= config[:latest_scala_version] %>"
libraryDependencies += "org.skinny-framework" %% "skinny-micro-server" % "<%= config[:skinny_micro_version] %>"
*/
import skinny.micro._
object HelloApp extends WebApp {
  get("/say-hello") {
    s"Hello, ${params.getOrElse("name", "Anonymous")}!\n"
  }
}
WebServer.mount(HelloApp).port(4567).start()

println
println("Try: curl -v 'localhost:4567/say-hello?name=Martin'")
println
```

<hr/>
### Routing & Controller & Validator
<hr/>

Previously Skinny 1.x’s routing mechanism and controller layer on MVC architecture was built upon Scalatra. Skinny project decided to move its own rich Servlet layer, Skinny Micro described above.

`SkinnyController` is a trait which extends `SkinnyMicroFilter (WebApp)` and includes various useful components out-of-the-box.

```scala
// src/main/scala/controller/MembersController.scala
class MembersController extends SkinnyController {
  def index = {
    set("members" -> Member.findAll()) // can call this in views
    render("/members/index")
  }
}
// src/main/scala/controller/Controllers.scala
object Controllers {
  object members extends MembersController with Routes {
    val indexUrl = get("/members/?")(index).as("index")
  }
}
// src/main/scala/ScalatraBootstrap.scala
class ScalatraBootstrap extends SkinnyLifeCycle {
  override def initSkinnyApp(ctx: ServletContext) {
    Controllers.members.mount(ctx)
  }
}
```

`SkinnyResource`, which is similar to Rails ActiveResource, is also available. It's a pretty DRY way to define RESTful resources.

```scala
object CompaniesController extends SkinnyResource {
  protectFromForgery()

  override def model = Company
  override def resourcesName = "companies"
  override def resourceName = "company"

  ...
}
```

`Company` object should implement `skinny.SkinnyModel` APIs and you should prepare some view templates under `src/main/webapp/WEB-INF/views/members/`.

See in detail: [Controller & Routes](documentation/controller-and-routes.html)

<hr/>
### Skinny ORM
<hr/>

Skinny provides you Skinny-ORM as the default O/R mapper, which is built with [ScalikeJDBC](https://github.com/scalikejdbc/scalikejdbc).

![Logo](images/scalikejdbc.png)

Skinny-ORM does a lot of work under the hood, so you don't need to write much code. Your first model class and companion are here.

```scala
case class Member(id: Long, name: String, createdAt: DateTime)

object Member extends SkinnyCRUDMapper[Member] {
  override def defaultAlias = createAlias("m")
  override def extract(rs: WrappedResultSet, n: ResultName[Member]) = new Member(
    id = rs.long(n.id),
    name = rs.string(n.name),
    createdAt = rs.dateTime(n.createdAt)
  )
}
```

That's all! Now you can use the following APIs.

```scala
// find by primary key
val member: Option[Member] = Member.findById(123)
val member: Option[Member] = Member.where("id" -> 123).apply().headOption
val members: List[Member] = Member.where("id" -> Seq(123, 234, 345)).apply()

// find many
val members: List[Member] = Member.findAll()
val groupMembers = Member.where("groupName" -> "Scala Users", 'deleted -> false).apply()

// create with unsafe parameters
Member.createWithAttributes(
  "id" -> 123,
  "name" -> "Chris",
  "createdAt" -> DateTime.now
)
// update with unsafe parameters
Member.updateById(123).withAttributes("name" -> "Alice")
// delete
Member.deleteById(234)
```

<hr/>
### DB Migration with Flyway
<hr/>

DB migration is provided by [Flyway](http://flywaydb.org/). Usage is pretty simple.

![Flyway Logo](images/flyway.png)

```sh
./skinny db:migrate [env]
````

This command expects `src/main/resources/db/migration/V***__***.sql` files.

See in detail: [DB Migration](documentation/db-migration.html)


<hr/>
### View Templates
<hr/>

Skinny framework basically follows Scalatra's [Scalate](http://scalate.github.io/scalate/) Support, but Skinny has an additional convention.

![Scalate Logo](images/scalate.png)

Template paths should be of the form `{path}.{format}.{extension}`. Expected {format} are `html`, `json`, `js` and `xml`.

For instance, assuming your controller code looks like this:

```scala
class MembersController extends SkinnyController {
  def index = {
    set("members", Member.findAll())
    render("/members/index")
  }
}
```

The render method expects that `src/main/webapp/WEB-INF/views/members/index.html.ssp` exists.

```
<%%=@val members: Seq[model.Member] %>
<hr/>
#for (member <- members)
  ${member.name}
#end
```

Scalate supports many template engines. For example, if you want to write your template using Jade, save it as `src/main/webapp/WEB-INF/views/members/index.html.jade` instead.

See in detail: [View Templates](documentation/view-templates.html)

<hr/>
### Skinny Mailer
<hr/>

SkinnyMailer makes sending emails pretty easy.

```scala
val config = SkinnyMailerConfigdefault.copy(
  debug = true
)
val mailer = SkinnyMailer(config)

mailer
  .from("info@skinny-framework.org")
  .to("you@example.com")
  .cc("support@skinny-framework.org", "xxx@example.com")
  .subject("Skinny Framework 1.0.0 is out!")
  .body {
    """Hi all,
    |
    |We're very proud to announce that Skinny Framework version 1.0.0 is released.
    |
    |.....
    |
    |Best,
    |Skinny Framework Team
    |""".stripMargin
  }.deliver()
```

See in detail: [Mail](documentation/mail.html)

<hr/>
### Assets Support (CoffeeScript, LESS, Sass, ReactJS, Scala.js)
<hr/>

![CoffeeScript Logo](images/coffeescript.png)
![LESS Logo](images/less.png)
![Sass Logo](images/sass.png)
![React Logo](images/react.png)
![Scala.js](images/scalajs.png)

First, add `skinny-assets` to libraryDependencies.

```
libraryDependencies ++= Seq(
  "org.skinny-framework" %% "skinny-framework" % "<%= config[:skinny_version] %>",
  "org.skinny-framework" %% "skinny-assets"    % "<%= config[:skinny_version] %>",
  "org.skinny-framework" %% "skinny-test"      % "<%= config[:skinny_version] %>" % "test"
)
```

And then, add `AssetsController` to routes. Now you can easily use CoffeeScript, LESS and Sass.

```scala
// src/main/scala/ScalatraBootstrap.scala
class ScalatraBootstrap extends SkinnyLifeCycle {
  override def initSkinnyApp(ctx: ServletContext) {
    AssetsController.mount(ctx)
  }
}
```

AssetsController supports Last-Modified header and returns status 304 correctly if the requested file isn't changed.

However, precompiling the assets is highly recommended in production (`./skinny package` does that).

See in detail: [Assets Support](documentation/assets.html)

<hr/>
### Testing Support
<hr/>

You can use Scalatra's great test support. Some extra optional features are provided by the skinny-test library.

```scala
class ControllerSpec extends ScalatraFlatSpec with SkinnyTestSupport {
  addFilter(MembersController, "/*")

  it should "show index page" in {
    withSession("userId" -> "Alice") {
      get("/members") { status should equal(200) }
    }
  }
}
```

See in detail: [Testing](documentation/testing.html)

<hr/>
### FactoryGirl
<hr/>

Though Skinny's FactoryGirl is not a complete port of [thoughtbot/factory_girl](https://github.com/thoughtbot/factory_girl), this module will be quite useful when testing your apps.

```scala
case class Company(id: Long, name: String)
object Company extends SkinnyCRUDMapper[Company] {
  def extract ...
}

val company1 = FactoryGirl(Company).create()
```

Configuration is not in yaml files but a typesafe-config conf file. In this example, `src/test/resources/factories.conf` looks like this:

```
company {
  name="Typesafe"
}
```

See in detail: [FactoryGirl](documentation/factory-girl.html)

<hr/>
## Examples
<hr/>

#### Basic Example

How to write controllers, models and routes. Test suites (87% coverage). Coveralls settings.

https://github.com/skinny-framework/skinny-framework-example

#### Scaldi Example

How to integrate Scaldi with Skinny Framework. Stubbing AWS SDK.

https://github.com/skinny-framework/skinny-scaldi-example

#### Skinny ORM in Play apps

How to use Skinny ORM in Play applications. Typesafe Activator Template. Reverse model generator.

https://github.com/skinny-framework/skinny-orm-in-play

#### Skinny Task Runner Example

How to use only skinny-task without Web application project settings.

https://github.com/skinny-framework/skinny-task-example

<hr/>
## Skinny Framework Team and You
<hr/>

Skinny Framework team is passionately working on this project.

https://github.com/orgs/skinny-framework/people

If you're interested in Skinny development, pull requests are always welcome.

<a href="/contribution.html">How to contribute</a>


<hr/>
## Under The MIT License
<hr/>

(The MIT License)

Copyright (c) skinny-framework.org
